//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Garden/InputAction/GardenControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GardenControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GardenControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GardenControl"",
    ""maps"": [
        {
            ""name"": ""GameplayControl"",
            ""id"": ""afb97747-2d0a-4831-aed0-d83bbff0eccb"",
            ""actions"": [
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ec4d6166-6a9a-4206-bc22-01c35b1c9fbc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""mouseButton"",
                    ""type"": ""Button"",
                    ""id"": ""4ff7d1a3-3f49-478f-a1d6-26396a220c60"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b8c058f-9656-4bfa-93a4-2275f2944169"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a438d02-5d6b-4684-b0eb-885dbf05855b"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca4e2b72-0e14-40a6-b2f0-06e43efa4167"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e67e4f57-fe3d-4a02-a702-e9aec8843a16"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4b6c3cd-fdae-47b5-a385-69195a141a49"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""665543b0-c72e-459f-b1d9-6a42187f0e21"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayControl
        m_GameplayControl = asset.FindActionMap("GameplayControl", throwIfNotFound: true);
        m_GameplayControl_mousePosition = m_GameplayControl.FindAction("mousePosition", throwIfNotFound: true);
        m_GameplayControl_mouseButton = m_GameplayControl.FindAction("mouseButton", throwIfNotFound: true);
    }

    ~@GardenControl()
    {
        UnityEngine.Debug.Assert(!m_GameplayControl.enabled, "This will cause a leak and performance issues, GardenControl.GameplayControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayControl
    private readonly InputActionMap m_GameplayControl;
    private List<IGameplayControlActions> m_GameplayControlActionsCallbackInterfaces = new List<IGameplayControlActions>();
    private readonly InputAction m_GameplayControl_mousePosition;
    private readonly InputAction m_GameplayControl_mouseButton;
    public struct GameplayControlActions
    {
        private @GardenControl m_Wrapper;
        public GameplayControlActions(@GardenControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @mousePosition => m_Wrapper.m_GameplayControl_mousePosition;
        public InputAction @mouseButton => m_Wrapper.m_GameplayControl_mouseButton;
        public InputActionMap Get() { return m_Wrapper.m_GameplayControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayControlActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayControlActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Add(instance);
            @mousePosition.started += instance.OnMousePosition;
            @mousePosition.performed += instance.OnMousePosition;
            @mousePosition.canceled += instance.OnMousePosition;
            @mouseButton.started += instance.OnMouseButton;
            @mouseButton.performed += instance.OnMouseButton;
            @mouseButton.canceled += instance.OnMouseButton;
        }

        private void UnregisterCallbacks(IGameplayControlActions instance)
        {
            @mousePosition.started -= instance.OnMousePosition;
            @mousePosition.performed -= instance.OnMousePosition;
            @mousePosition.canceled -= instance.OnMousePosition;
            @mouseButton.started -= instance.OnMouseButton;
            @mouseButton.performed -= instance.OnMouseButton;
            @mouseButton.canceled -= instance.OnMouseButton;
        }

        public void RemoveCallbacks(IGameplayControlActions instance)
        {
            if (m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayControlActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayControlActions @GameplayControl => new GameplayControlActions(this);
    public interface IGameplayControlActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseButton(InputAction.CallbackContext context);
    }
}
